OrdersController

class Admin::OrdersController < ApplicationController

  def show
    	# 注文内容の情報を取得
  	@order = Order.find(params[:id])
    # 注文内容の商品を取得
  	@order_items = @order.order_details
  end

  def update
    @order = Order.find(params[:id]).      |#findメソッドでpramas(パラメータ)にあるOrderテーブルの数あるIDから指定のIDを抜き取る
    
    @order_details = @order.order_details. |#@order(Orderテーブルから抜き取った指定IDの情報)に入ってる数ある情報から
    　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Order_details(注文情報)の情報のみを指定したものが@order_detailsという定義
    
    if@order.update(order_params)          |#if文で@order(Orderテーブルの数あるIDから抜き取った指定ID)の
                                             order_params(ストロングパラメータに入ってる情報(permit※今回だとstatus))が
                                             updateされたときとういう条件式
      
      @order_details.update_all(making_status:"wait")if @order.status == "paid_up" |# 後ろに書いてあるがif文の意味が先になる。
                                                                                      @orderの中にあるstatusの値がpaid_upだった時
                                                                                      @order_details(指定IDの注文詳細)の中にある
                                                                                      making_statusをwaitに全て更新する
      flash[:notice] = "情報が更新されました"
    end  
    redirect_to admin_order_path(@order.id)
  end
  
  private

  def order_params
    params.require(:order).permit(:status)
  end


  
end
================================================================================================================================================================
OrderDetailsController

class Admin::OrderDetailsController < ApplicationController
  def show
    @customer = Customer.find(params[:id])
    @orders = @customer.orders
  end
  
  def update
    @order_detail = OrderDetail.find(params[:id]) |#findメソッドでOrderDetailテーブルにある数あるID
                                                    (パラメータという箱の中にあるIDという箱)から指定IDを抜き取る(ex)id:3だとid:3の注文詳細の情報
    
    @order = @order_detail.order   |#指定IDの注文詳細の中にあるorderの情報のみを使用するということを@orderに定義している。
    
    @order_details = @order.order_details.all |#各商品ごとに注文詳細があるため@order_detailsに＠orderの中にある注文詳細全ての情報であることを定義している
    
    is_updated = true |# 何かを判断したい時に変数として指定している。よくis_◯ ◯(◯ ◯には判断基準のものを入れる)で使われる。
                         今回だとis_updatedは現段階でtrueであると指定している。これは下記の76行目のis_updatedの判断材料になる。
    
    if @order_detail.update(order_detail_params) |#if文で@order_detail(指定IDの注文詳細)のストロングパラメータの内容(permit※今回だとmaking_status)が
                                                   updateされた場合を条件としている
    
       @order.update(status:"in_production")if @order_detail.making_status == "start" |#製作ステータスが製作中だと注文ステータス更新する。
                                                                                        if文は後ろに書く。意味合いではif文が先。
                                                                                        もし@order_detailのmaking_statusが１つでもstartの時
                                                                                        @orderにあるstatusがin_productionに更新される。
       flash[:notice] = "情報が更新されました"
       @order_details.each do |order_detail|.   |#製作ステータスが全て製作完了だと自動更新されるようにするための条件。
                                                  全て確認しないといけないためeach文で各注文詳細(ケーキやクッキーの製作状況)の製作ステータスを確認。
       
       if order_detail.making_status !="finish" |#if文でorder_detailの製作ステータスがfinish(製作完了)ではない時と条件指定
       
           is_updated = false.  |# is_updatedがfalseになる。これは下記の76行目のis_updatedの判断材料になる。
       end
    end
    @order.update(status:"prepareing")if is_updated  |#if文で条件指定。is_updatedがtrueかfalseかで実行するか判断する。
                                                       is_updatedがtrueだと@orderの注文ステータスを発送準備中に自動更新(update)する。
                                                       is_updatedがfalseだと自動更新を行わない。
    end
    redirect_to admin_order_path(@order_detail.order), notice:"製作ステータスを更新しました"   
  end
  
  def order_detail_params
    params.require(:order_detail).permit(:making_status)
  end
end

================================================================================================================================================================

<div>
  <%= flash[:notice] %>
</div>

<h2>注文履歴詳細</h2>

<div class="container">
  <div class = "row">
    <div class = col-3>
      購入者
    </div>
    <div class = col-lg-9>
     <%= link_to admin_customer_path do %><%= @order.name %><% end %>
    </div>
  </div>
  <div class = "row">
    <div class = col-3>
      注文日
    </div>
    <div class = "col-9 scoreStatus_list_label registration_date">
      <%= @order.created_at.strftime('%Y/%m/%d') %>
    </div>
  </div>
  <div class = "row">
    <div class = col-3>
      配送先
    </div>
    <div class = col-9>
      <div>〒<%= @order.postal_code %><%= @order.address %><br><%= @order.name %></div>
    </div>
  </div>
  <div class = "row">
    <div class = col-3>
      支払方法
    </div>
    <div class = col-9>
      <%= @order.payment_method_i18n %>
    </div>
  </div>
  <div class = "row">
    <%= render'status', order: @order %>
  </div>
  <table class="table table-bordered">
    <thead>
      <tr>
        <th>商品名</th>
        <th>単価（税込）</th>
        <th>数量</th>
        <th>小計</th>
        <th>製作ステータス</th>
      </tr>
    </thead>
    <tbody>
      <%= render 'admin/order_details/making_status', order: @order %>
    </tbody>
  </table>
  <div>
     <h4>商品合計     <%#= ((@order.order_detail.price_including_tax*1.10).round) * @order.order_detail.quantity %>円</h4>
     <h4>送料　　　    <%= @order.postage %>円</h4>
     <h4>請求金額合計　<%= @order.total_price %>円</h4>
    </div>
  </div>
  
</div>

================================================================================================================================================================

<div class="container">
  <div class="row">
    <div class="col-xs-12">
      <h2>注文履歴詳細</h2>
      <!-- 購入詳細情報 -->
      <table>
        <tr>
          <th>購入者</th>
          <td><%= @order.customer.family_name %> <%= @order.customer.first_name %></td>
        </tr>
        <tr>
          <th>配送先</th>
          <td>〒<%= @order.postal_code %> <%= @order.address %><br><%= @order.name %></td>
        </tr>
        <tr>
          <th>支払い方法</th>
          <td><%= @order.payment_method %></td>
        </tr>
        <tr>
        <!-- 注文ステータス変更　プルダウン　更新を押すとアップデート -->
        <th>注文ステータス</th>
        <td>
          <%= form_for @order, url: admin_order_path do |f| %><!--oreder controllerのupdateの飛ぶ-->
          　<%#= f.select :status,["入金待ち","入金確認","製作中","発送準備中","発送済"] ,style: "margin-top:10px;#" %><!--ステータス選択 -->
          　 <%= f.select :status, options_for_select(Order.statuses.keys.map { |status| [t("enums.order.status.#{status}"), status] }, @order.status), { include_blank: "-- 選択してください --" }, {required: true, class: "form-control", id:"status-select" }%>

          <%= f.submit "更新" ,class: "btn btn-primary btn-sm" %></td>
          <% end %>
        </tr>
      </table>
    </div>
  </div>
  <div class="orders-show">
    <div class=" col-xs-9">
      <table class="table ">
        <tr>
          <th>商品名</th>
          <th>単価（税込）</th>
          <th>数量</th>
          <th>小計</th>
          <th>製作ステータス</th>
          <th></th>
        </tr>
        <%  @order_items.each do |order_item| %><!--注文した商品の履歴一覧をeach分で表示　-->
        <tr>
          <td><%= order_item.item.name %></td>
          <td><%= (order_item.price_including_tax * 1.10).round %></td>
          <td><%= order_item.quantity %></td>
          <td><%= (((order_item.price_including_tax * 1.10).round)*(order_item.quantity)) %> </td>
        <!-- 製作ステータス変更　更新を押すと更新-->
          <%= form_for order_item,url: admin_order_path(order_item) do |f| %>
          <td><%= f.select :making_status,["着手不可","製作待ち","製作中","製作完了"] %></td><!--ステータス選択 -->
          <td><%= f.submit "更新" ,class:"btn btn-primary btn-xs" %></td>
          <% end %>
        </tr>
          <% end %>
      </table>
    </div>


    <div>
     <h4>商品合計     <%= @order.total_price %>円</h4>
     <h4>送料　　　    <%= @order.postage %>円</h4>
     <h4>請求金額合計　<%= (@order.total_price+@order.postage) %>円</h4>
    </div>
  </div>

</div>
